{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":204267,"sourceType":"datasetVersion","datasetId":88705}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"quantbruce/real-estate-price-prediction\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for data visualization purposes\nimport seaborn as sns # for data visualization\n%matplotlib inline\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import warnings\n\nwarnings.filterwarnings('ignore')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = '/kaggle/input/real-estate-price-prediction/Real estate.csv'\n\ndf = pd.read_csv(data, header=None)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# view dimensions of dataset\n\ndf.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import StandardScaler","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data=pd.read_csv(\"/kaggle/input/real-estate-price-prediction/Real estate.csv\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.describe()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.isnull().sum()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data.select_dtypes(include='number').columns.tolist()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numercal_colams=data.select_dtypes(include='number').columns.tolist()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def cap_outliers(df, column):\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    df[column] = df[column].apply(lambda x: upper_bound if x > upper_bound else (lower_bound if x < lower_bound else x))\n\ncolumns_to_cap = [\"X3 distance to the nearest MRT station\",\"X5 latitude\",\"X6 longitude\", \"Y house price of unit area\"]\nfor col in columns_to_cap:\n    cap_outliers(data, col)\n\nplt.figure(figsize=(15, 10))\nfor i, col in enumerate(columns_to_cap, 1):\n    plt.subplot(1, 4, i)\n    data.boxplot(column=col)\n    plt.title(f'Boxplot of {col} after capping outliers')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = data.drop(columns=[\"No\", \"Y house price of unit area\"])\ntarget=data[\"Y house price of unit area\"]\nscaler=StandardScaler()\nscaled_feature=scaler.fit_transform(features)\nscaled_feature_df=pd.DataFrame(scaled_feature,columns=features.columns)\nscaled_feature_df.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(scaled_feature_df,target,test_size=0.3,shuffle=True,random_state=42)\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)\ny_pred=model.predict(x_test)\nmse=mean_squared_error(y_test,y_pred)\nr2=r2_score(y_test,y_pred)\nprint(\"R2_score    :\" , r2) \nprint(\"mean_squre_error  :\" , mse)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}